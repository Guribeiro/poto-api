generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                              String              @id @default(uuid())
  full_name                       String
  email                           String              @unique
  password                        String
  created_at                      DateTime            @default(now())
  updated_at                      DateTime            @default(now())
  address_id                      String?
  avatar                          String?
  username                        String?
  address                         Addresses?          @relation(fields: [address_id], references: [id])
  comments                        Comments[]
  likes                           Likes[]
  posts                           Posts[]
  userTokens                      UserTokens[]
  UserFriendship                  Friendship[]        @relation(name: "UserFriendship")
  FriendFrienship                 Friendship[]        @relation(name: "FriendFrienship")
  RequesteeFriendshipRequest      FriendshipRequest[] @relation(name: "RequesteeFriendshipRequest")
  RequestedFriendFrienshipRequest FriendshipRequest[] @relation(name: "RequestedFriendFrienshipRequest")

  @@map("users")
}

model Addresses {
  id         String   @id @default(uuid())
  cep        String
  complement String?
  street     String
  district   String
  state      String
  city       String
  country    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  users      Users[]

  @@map("addresses")
}

model UserTokens {
  id            String   @id @default(uuid())
  refresh_token String
  user_id       String
  expires_date  DateTime
  created_at    DateTime @default(now())
  user          Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_tokens")
}

model Posts {
  id         String     @id @default(uuid())
  user_id    String
  subtitle   String?
  photo      String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  latitude   Float?
  longitude  Float?
  user       Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments   Comments[]
  likes      Likes[]

  @@map("posts")
}

model Likes {
  id         String   @id @default(uuid())
  user_id    String
  post_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  post       Posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comments {
  id         String   @id @default(uuid())
  content    String
  user_id    String
  post_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  post       Posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Friendship {
  id         String   @id @default(uuid())
  user_id    String
  friend_id  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       Users    @relation(name: "UserFriendship", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend     Users    @relation(name: "FriendFrienship", fields: [friend_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FriendshipRequest {
  id           String   @id @default(uuid())
  requestee_id String
  requested_id String
  created_at   DateTime @default(now())
  requestee    Users    @relation(name: "RequesteeFriendshipRequest", fields: [requestee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requested    Users    @relation(name: "RequestedFriendFrienshipRequest", fields: [requested_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
